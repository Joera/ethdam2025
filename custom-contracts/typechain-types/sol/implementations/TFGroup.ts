/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TFGroupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_MINT_HANDLER"
      | "BASE_MINT_POLICY"
      | "BASE_TREASURY"
      | "HUB"
      | "LIFT_ERC20"
      | "MAX_CONDITIONS"
      | "NAME_REGISTRY"
      | "feeCollection"
      | "getMembershipConditions"
      | "membershipConditions"
      | "owner"
      | "registerShortNameWithNonce"
      | "service"
      | "setFeeCollection"
      | "setMembershipCondition"
      | "setOwner"
      | "setService"
      | "trust"
      | "trustBatchWithConditions"
      | "updateMetadataDigest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeCollectionUpdated"
      | "MembershipConditionEnabled"
      | "OwnerUpdated"
      | "ServiceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_MINT_HANDLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_MINT_POLICY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_TREASURY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HUB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LIFT_ERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONDITIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NAME_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipConditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "membershipConditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerShortNameWithNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "service", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFeeCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipCondition",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setService",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trust",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustBatchWithConditions",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadataDigest",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_MINT_HANDLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_MINT_POLICY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_TREASURY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LIFT_ERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONDITIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NAME_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "membershipConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerShortNameWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "service", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setService", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustBatchWithConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadataDigest",
    data: BytesLike
  ): Result;
}

export namespace FeeCollectionUpdatedEvent {
  export type InputTuple = [feeCollection: AddressLike];
  export type OutputTuple = [feeCollection: string];
  export interface OutputObject {
    feeCollection: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MembershipConditionEnabledEvent {
  export type InputTuple = [condition: AddressLike, enabled: boolean];
  export type OutputTuple = [condition: string, enabled: boolean];
  export interface OutputObject {
    condition: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceUpdatedEvent {
  export type InputTuple = [newService: AddressLike];
  export type OutputTuple = [newService: string];
  export interface OutputObject {
    newService: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TFGroup extends BaseContract {
  connect(runner?: ContractRunner | null): TFGroup;
  waitForDeployment(): Promise<this>;

  interface: TFGroupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_MINT_HANDLER: TypedContractMethod<[], [string], "view">;

  BASE_MINT_POLICY: TypedContractMethod<[], [string], "view">;

  BASE_TREASURY: TypedContractMethod<[], [string], "view">;

  HUB: TypedContractMethod<[], [string], "view">;

  LIFT_ERC20: TypedContractMethod<[], [string], "view">;

  MAX_CONDITIONS: TypedContractMethod<[], [bigint], "view">;

  NAME_REGISTRY: TypedContractMethod<[], [string], "view">;

  feeCollection: TypedContractMethod<[], [string], "view">;

  getMembershipConditions: TypedContractMethod<[], [string[]], "view">;

  membershipConditions: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerShortNameWithNonce: TypedContractMethod<
    [_nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  service: TypedContractMethod<[], [string], "view">;

  setFeeCollection: TypedContractMethod<
    [_feeCollection: AddressLike],
    [void],
    "nonpayable"
  >;

  setMembershipCondition: TypedContractMethod<
    [_condition: AddressLike, _enabled: boolean],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  setService: TypedContractMethod<
    [_service: AddressLike],
    [void],
    "nonpayable"
  >;

  trust: TypedContractMethod<
    [_trustReceiver: AddressLike, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  trustBatchWithConditions: TypedContractMethod<
    [_members: AddressLike[], _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMetadataDigest: TypedContractMethod<
    [_metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_MINT_HANDLER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_MINT_POLICY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_TREASURY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HUB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LIFT_ERC20"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_CONDITIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NAME_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeCollection"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMembershipConditions"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "membershipConditions"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerShortNameWithNonce"
  ): TypedContractMethod<[_nonce: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "service"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFeeCollection"
  ): TypedContractMethod<[_feeCollection: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMembershipCondition"
  ): TypedContractMethod<
    [_condition: AddressLike, _enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setService"
  ): TypedContractMethod<[_service: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trust"
  ): TypedContractMethod<
    [_trustReceiver: AddressLike, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustBatchWithConditions"
  ): TypedContractMethod<
    [_members: AddressLike[], _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMetadataDigest"
  ): TypedContractMethod<[_metadataDigest: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "FeeCollectionUpdated"
  ): TypedContractEvent<
    FeeCollectionUpdatedEvent.InputTuple,
    FeeCollectionUpdatedEvent.OutputTuple,
    FeeCollectionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MembershipConditionEnabled"
  ): TypedContractEvent<
    MembershipConditionEnabledEvent.InputTuple,
    MembershipConditionEnabledEvent.OutputTuple,
    MembershipConditionEnabledEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceUpdated"
  ): TypedContractEvent<
    ServiceUpdatedEvent.InputTuple,
    ServiceUpdatedEvent.OutputTuple,
    ServiceUpdatedEvent.OutputObject
  >;

  filters: {
    "FeeCollectionUpdated(address)": TypedContractEvent<
      FeeCollectionUpdatedEvent.InputTuple,
      FeeCollectionUpdatedEvent.OutputTuple,
      FeeCollectionUpdatedEvent.OutputObject
    >;
    FeeCollectionUpdated: TypedContractEvent<
      FeeCollectionUpdatedEvent.InputTuple,
      FeeCollectionUpdatedEvent.OutputTuple,
      FeeCollectionUpdatedEvent.OutputObject
    >;

    "MembershipConditionEnabled(address,bool)": TypedContractEvent<
      MembershipConditionEnabledEvent.InputTuple,
      MembershipConditionEnabledEvent.OutputTuple,
      MembershipConditionEnabledEvent.OutputObject
    >;
    MembershipConditionEnabled: TypedContractEvent<
      MembershipConditionEnabledEvent.InputTuple,
      MembershipConditionEnabledEvent.OutputTuple,
      MembershipConditionEnabledEvent.OutputObject
    >;

    "OwnerUpdated(address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "ServiceUpdated(address)": TypedContractEvent<
      ServiceUpdatedEvent.InputTuple,
      ServiceUpdatedEvent.OutputTuple,
      ServiceUpdatedEvent.OutputObject
    >;
    ServiceUpdated: TypedContractEvent<
      ServiceUpdatedEvent.InputTuple,
      ServiceUpdatedEvent.OutputTuple,
      ServiceUpdatedEvent.OutputObject
    >;
  };
}
