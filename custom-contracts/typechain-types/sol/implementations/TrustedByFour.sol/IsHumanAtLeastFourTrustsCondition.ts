/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace CirclesCoreAddresses {
  export type CirclesCoreStruct = {
    hub: AddressLike;
    standardTreasury: AddressLike;
    nameRegistry: AddressLike;
    erc20Lift: AddressLike;
  };

  export type CirclesCoreStructOutput = [
    hub: string,
    standardTreasury: string,
    nameRegistry: string,
    erc20Lift: string
  ] & {
    hub: string;
    standardTreasury: string;
    nameRegistry: string;
    erc20Lift: string;
  };
}

export interface IsHumanAtLeastFourTrustsConditionInterface extends Interface {
  getFunction(
    nameOrSignature: "circlesCore" | "passesMembershipCondition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "circlesCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "passesMembershipCondition",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "circlesCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "passesMembershipCondition",
    data: BytesLike
  ): Result;
}

export interface IsHumanAtLeastFourTrustsCondition extends BaseContract {
  connect(runner?: ContractRunner | null): IsHumanAtLeastFourTrustsCondition;
  waitForDeployment(): Promise<this>;

  interface: IsHumanAtLeastFourTrustsConditionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  circlesCore: TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        hub: string;
        standardTreasury: string;
        nameRegistry: string;
        erc20Lift: string;
      }
    ],
    "view"
  >;

  passesMembershipCondition: TypedContractMethod<
    [_avatar: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "circlesCore"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        hub: string;
        standardTreasury: string;
        nameRegistry: string;
        erc20Lift: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "passesMembershipCondition"
  ): TypedContractMethod<[_avatar: AddressLike], [boolean], "nonpayable">;

  filters: {};
}
