/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TFGroupFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createTrustFund" | "deployedByFactory"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BaseGroupCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createTrustFund",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike[],
      string,
      string,
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedByFactory",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTrustFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedByFactory",
    data: BytesLike
  ): Result;
}

export namespace BaseGroupCreatedEvent {
  export type InputTuple = [
    group: AddressLike,
    owner: AddressLike,
    mintHandler: AddressLike,
    treasury: AddressLike
  ];
  export type OutputTuple = [
    group: string,
    owner: string,
    mintHandler: string,
    treasury: string
  ];
  export interface OutputObject {
    group: string;
    owner: string;
    mintHandler: string;
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TFGroupFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TFGroupFactory;
  waitForDeployment(): Promise<this>;

  interface: TFGroupFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTrustFund: TypedContractMethod<
    [
      _owner: AddressLike,
      _service: AddressLike,
      _feeCollection: AddressLike,
      _customMintPolicy: AddressLike,
      _initialConditions: AddressLike[],
      _name: string,
      _symbol: string,
      _metadataDigest: BytesLike,
      eureToken: AddressLike,
      mintPolicy: AddressLike,
      contributionAmount: BigNumberish,
      payOutDay: BigNumberish,
      stableCoinTokenAddress: AddressLike
    ],
    [
      [string, string, string] & {
        group: string;
        mintHandler: string;
        treasury: string;
      }
    ],
    "nonpayable"
  >;

  deployedByFactory: TypedContractMethod<
    [group: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTrustFund"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _service: AddressLike,
      _feeCollection: AddressLike,
      _customMintPolicy: AddressLike,
      _initialConditions: AddressLike[],
      _name: string,
      _symbol: string,
      _metadataDigest: BytesLike,
      eureToken: AddressLike,
      mintPolicy: AddressLike,
      contributionAmount: BigNumberish,
      payOutDay: BigNumberish,
      stableCoinTokenAddress: AddressLike
    ],
    [
      [string, string, string] & {
        group: string;
        mintHandler: string;
        treasury: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedByFactory"
  ): TypedContractMethod<[group: AddressLike], [boolean], "view">;

  getEvent(
    key: "BaseGroupCreated"
  ): TypedContractEvent<
    BaseGroupCreatedEvent.InputTuple,
    BaseGroupCreatedEvent.OutputTuple,
    BaseGroupCreatedEvent.OutputObject
  >;

  filters: {
    "BaseGroupCreated(address,address,address,address)": TypedContractEvent<
      BaseGroupCreatedEvent.InputTuple,
      BaseGroupCreatedEvent.OutputTuple,
      BaseGroupCreatedEvent.OutputObject
    >;
    BaseGroupCreated: TypedContractEvent<
      BaseGroupCreatedEvent.InputTuple,
      BaseGroupCreatedEvent.OutputTuple,
      BaseGroupCreatedEvent.OutputObject
    >;
  };
}
