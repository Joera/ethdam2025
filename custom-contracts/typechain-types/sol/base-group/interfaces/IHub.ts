/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "burn"
      | "groupMint"
      | "isTrusted"
      | "registerCustomGroup"
      | "registerOrganization"
      | "safeTransferFrom"
      | "trust"
      | "wrap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "groupMint",
    values: [AddressLike, AddressLike[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrusted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCustomGroup",
    values: [AddressLike, AddressLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOrganization",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trust",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "groupMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCustomGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trust", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
}

export interface IHub extends BaseContract {
  connect(runner?: ContractRunner | null): IHub;
  waitForDeployment(): Promise<this>;

  interface: IHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  groupMint: TypedContractMethod<
    [
      group: AddressLike,
      collateralAvatars: AddressLike[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isTrusted: TypedContractMethod<
    [truster: AddressLike, trustee: AddressLike],
    [boolean],
    "nonpayable"
  >;

  registerCustomGroup: TypedContractMethod<
    [
      mint: AddressLike,
      treasury: AddressLike,
      name: string,
      symbol: string,
      metadataDigest: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registerOrganization: TypedContractMethod<
    [name: string, metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  trust: TypedContractMethod<
    [trustReceiver: AddressLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  wrap: TypedContractMethod<
    [avatar: AddressLike, amount: BigNumberish, circlesType: BigNumberish],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "groupMint"
  ): TypedContractMethod<
    [
      group: AddressLike,
      collateralAvatars: AddressLike[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTrusted"
  ): TypedContractMethod<
    [truster: AddressLike, trustee: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerCustomGroup"
  ): TypedContractMethod<
    [
      mint: AddressLike,
      treasury: AddressLike,
      name: string,
      symbol: string,
      metadataDigest: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerOrganization"
  ): TypedContractMethod<
    [name: string, metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trust"
  ): TypedContractMethod<
    [trustReceiver: AddressLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrap"
  ): TypedContractMethod<
    [avatar: AddressLike, amount: BigNumberish, circlesType: BigNumberish],
    [string],
    "nonpayable"
  >;

  filters: {};
}
