/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BaseMintHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEMURRAGE"
      | "GROUP"
      | "GROUP_ID"
      | "HUB"
      | "INFLATIONARY"
      | "NAME_REGISTRY"
      | "TYPE_DEMURRAGE"
      | "TYPE_INFLATIONARY"
      | "mirrorTrust"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "supportsInterface"
      | "updateMetadataDigest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConversionCleared"
      | "ConversionInitiated"
      | "ReturnedMintedGroupCircles"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DEMURRAGE", values?: undefined): string;
  encodeFunctionData(functionFragment: "GROUP", values?: undefined): string;
  encodeFunctionData(functionFragment: "GROUP_ID", values?: undefined): string;
  encodeFunctionData(functionFragment: "HUB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "INFLATIONARY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NAME_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TYPE_DEMURRAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TYPE_INFLATIONARY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorTrust",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadataDigest",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "DEMURRAGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GROUP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GROUP_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HUB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INFLATIONARY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NAME_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TYPE_DEMURRAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TYPE_INFLATIONARY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorTrust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadataDigest",
    data: BytesLike
  ): Result;
}

export namespace ConversionClearedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConversionInitiatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    tokenType: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    tokenType: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnedMintedGroupCirclesEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    tokenType: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    tokenType: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseMintHandler extends BaseContract {
  connect(runner?: ContractRunner | null): BaseMintHandler;
  waitForDeployment(): Promise<this>;

  interface: BaseMintHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEMURRAGE: TypedContractMethod<[], [string], "view">;

  GROUP: TypedContractMethod<[], [string], "view">;

  GROUP_ID: TypedContractMethod<[], [bigint], "view">;

  HUB: TypedContractMethod<[], [string], "view">;

  INFLATIONARY: TypedContractMethod<[], [string], "view">;

  NAME_REGISTRY: TypedContractMethod<[], [string], "view">;

  TYPE_DEMURRAGE: TypedContractMethod<[], [string], "view">;

  TYPE_INFLATIONARY: TypedContractMethod<[], [string], "view">;

  mirrorTrust: TypedContractMethod<
    [_trustReceiver: AddressLike, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateMetadataDigest: TypedContractMethod<
    [_metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEMURRAGE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GROUP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GROUP_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HUB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INFLATIONARY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NAME_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TYPE_DEMURRAGE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TYPE_INFLATIONARY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mirrorTrust"
  ): TypedContractMethod<
    [_trustReceiver: AddressLike, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateMetadataDigest"
  ): TypedContractMethod<[_metadataDigest: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "ConversionCleared"
  ): TypedContractEvent<
    ConversionClearedEvent.InputTuple,
    ConversionClearedEvent.OutputTuple,
    ConversionClearedEvent.OutputObject
  >;
  getEvent(
    key: "ConversionInitiated"
  ): TypedContractEvent<
    ConversionInitiatedEvent.InputTuple,
    ConversionInitiatedEvent.OutputTuple,
    ConversionInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "ReturnedMintedGroupCircles"
  ): TypedContractEvent<
    ReturnedMintedGroupCirclesEvent.InputTuple,
    ReturnedMintedGroupCirclesEvent.OutputTuple,
    ReturnedMintedGroupCirclesEvent.OutputObject
  >;

  filters: {
    "ConversionCleared()": TypedContractEvent<
      ConversionClearedEvent.InputTuple,
      ConversionClearedEvent.OutputTuple,
      ConversionClearedEvent.OutputObject
    >;
    ConversionCleared: TypedContractEvent<
      ConversionClearedEvent.InputTuple,
      ConversionClearedEvent.OutputTuple,
      ConversionClearedEvent.OutputObject
    >;

    "ConversionInitiated(address,uint256,uint256)": TypedContractEvent<
      ConversionInitiatedEvent.InputTuple,
      ConversionInitiatedEvent.OutputTuple,
      ConversionInitiatedEvent.OutputObject
    >;
    ConversionInitiated: TypedContractEvent<
      ConversionInitiatedEvent.InputTuple,
      ConversionInitiatedEvent.OutputTuple,
      ConversionInitiatedEvent.OutputObject
    >;

    "ReturnedMintedGroupCircles(address,uint256,uint256)": TypedContractEvent<
      ReturnedMintedGroupCirclesEvent.InputTuple,
      ReturnedMintedGroupCirclesEvent.OutputTuple,
      ReturnedMintedGroupCirclesEvent.OutputObject
    >;
    ReturnedMintedGroupCircles: TypedContractEvent<
      ReturnedMintedGroupCirclesEvent.InputTuple,
      ReturnedMintedGroupCirclesEvent.OutputTuple,
      ReturnedMintedGroupCirclesEvent.OutputObject
    >;
  };
}
