/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface INameRegistryExtendedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMetadataDigest"
      | "isValidName"
      | "isValidSymbol"
      | "name"
      | "registerCustomName"
      | "registerCustomSymbol"
      | "registerShortName"
      | "registerShortNameWithNonce"
      | "setMetadataDigest"
      | "symbol"
      | "updateMetadataDigest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMetadataDigest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isValidName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidSymbol",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "registerCustomName",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCustomSymbol",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerShortName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerShortNameWithNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataDigest",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "updateMetadataDigest",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMetadataDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCustomName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCustomSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerShortName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerShortNameWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadataDigest",
    data: BytesLike
  ): Result;
}

export interface INameRegistryExtended extends BaseContract {
  connect(runner?: ContractRunner | null): INameRegistryExtended;
  waitForDeployment(): Promise<this>;

  interface: INameRegistryExtendedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMetadataDigest: TypedContractMethod<
    [_avatar: AddressLike],
    [string],
    "view"
  >;

  isValidName: TypedContractMethod<[name: string], [boolean], "view">;

  isValidSymbol: TypedContractMethod<[symbol: string], [boolean], "view">;

  name: TypedContractMethod<[avatar: AddressLike], [string], "view">;

  registerCustomName: TypedContractMethod<
    [avatar: AddressLike, name: string],
    [void],
    "nonpayable"
  >;

  registerCustomSymbol: TypedContractMethod<
    [avatar: AddressLike, symbol: string],
    [void],
    "nonpayable"
  >;

  registerShortName: TypedContractMethod<[], [void], "nonpayable">;

  registerShortNameWithNonce: TypedContractMethod<
    [nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMetadataDigest: TypedContractMethod<
    [avatar: AddressLike, metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[avatar: AddressLike], [string], "view">;

  updateMetadataDigest: TypedContractMethod<
    [metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMetadataDigest"
  ): TypedContractMethod<[_avatar: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isValidName"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSymbol"
  ): TypedContractMethod<[symbol: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[avatar: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registerCustomName"
  ): TypedContractMethod<
    [avatar: AddressLike, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerCustomSymbol"
  ): TypedContractMethod<
    [avatar: AddressLike, symbol: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerShortName"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerShortNameWithNonce"
  ): TypedContractMethod<[nonce: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadataDigest"
  ): TypedContractMethod<
    [avatar: AddressLike, metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[avatar: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateMetadataDigest"
  ): TypedContractMethod<[metadataDigest: BytesLike], [void], "nonpayable">;

  filters: {};
}
