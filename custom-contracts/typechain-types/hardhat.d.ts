/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BaseMintHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseMintHandler__factory>;
    getContractFactory(
      name: "BaseMintPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseMintPolicy__factory>;
    getContractFactory(
      name: "BaseTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseTreasury__factory>;
    getContractFactory(
      name: "IHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHub__factory>;
    getContractFactory(
      name: "ILiftERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiftERC20__factory>;
    getContractFactory(
      name: "INameRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameRegistry__factory>;
    getContractFactory(
      name: "IMembershipCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMembershipCondition__factory>;
    getContractFactory(
      name: "Circle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Circle__factory>;
    getContractFactory(
      name: "CustomMintPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomMintPolicy__factory>;
    getContractFactory(
      name: "TFGroup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TFGroup__factory>;
    getContractFactory(
      name: "TFGroupFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TFGroupFactory__factory>;
    getContractFactory(
      name: "ICircle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICircle__factory>;

    getContractAt(
      name: "IERC1155Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BaseMintHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseMintHandler>;
    getContractAt(
      name: "BaseMintPolicy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseMintPolicy>;
    getContractAt(
      name: "BaseTreasury",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseTreasury>;
    getContractAt(
      name: "IHub",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHub>;
    getContractAt(
      name: "ILiftERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiftERC20>;
    getContractAt(
      name: "INameRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INameRegistry>;
    getContractAt(
      name: "IMembershipCondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMembershipCondition>;
    getContractAt(
      name: "Circle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Circle>;
    getContractAt(
      name: "CustomMintPolicy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomMintPolicy>;
    getContractAt(
      name: "TFGroup",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TFGroup>;
    getContractAt(
      name: "TFGroupFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TFGroupFactory>;
    getContractAt(
      name: "ICircle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICircle>;

    deployContract(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BaseMintHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseMintHandler>;
    deployContract(
      name: "BaseMintPolicy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseMintPolicy>;
    deployContract(
      name: "BaseTreasury",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseTreasury>;
    deployContract(
      name: "IHub",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHub>;
    deployContract(
      name: "ILiftERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiftERC20>;
    deployContract(
      name: "INameRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameRegistry>;
    deployContract(
      name: "IMembershipCondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMembershipCondition>;
    deployContract(
      name: "Circle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Circle>;
    deployContract(
      name: "CustomMintPolicy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CustomMintPolicy>;
    deployContract(
      name: "TFGroup",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TFGroup>;
    deployContract(
      name: "TFGroupFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TFGroupFactory>;
    deployContract(
      name: "ICircle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICircle>;

    deployContract(
      name: "IERC1155Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BaseMintHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseMintHandler>;
    deployContract(
      name: "BaseMintPolicy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseMintPolicy>;
    deployContract(
      name: "BaseTreasury",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseTreasury>;
    deployContract(
      name: "IHub",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHub>;
    deployContract(
      name: "ILiftERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiftERC20>;
    deployContract(
      name: "INameRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameRegistry>;
    deployContract(
      name: "IMembershipCondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMembershipCondition>;
    deployContract(
      name: "Circle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Circle>;
    deployContract(
      name: "CustomMintPolicy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CustomMintPolicy>;
    deployContract(
      name: "TFGroup",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TFGroup>;
    deployContract(
      name: "TFGroupFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TFGroupFactory>;
    deployContract(
      name: "ICircle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICircle>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
