/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  INameRegistry,
  INameRegistryInterface,
} from "../../../../sol/base-group/interfaces/INameRegistry";

const _abi = [
  {
    inputs: [],
    name: "registerShortName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "registerShortNameWithNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "metadataDigest",
        type: "bytes32",
      },
    ],
    name: "updateMetadataDigest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class INameRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): INameRegistryInterface {
    return new Interface(_abi) as INameRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): INameRegistry {
    return new Contract(address, _abi, runner) as unknown as INameRegistry;
  }
}
