/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BaseTreasury,
  BaseTreasuryInterface,
} from "../../../sol/base-group/BaseTreasury";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_hub",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nameRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_group",
        type: "address",
      },
      {
        internalType: "string",
        name: "_groupName",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_metadataDigest",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CollateralIsNotTrustedByGroup",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyGroup",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyHub",
    type: "error",
  },
  {
    inputs: [],
    name: "GROUP",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "HUB",
    outputs: [
      {
        internalType: "contract IHub",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NAME_REGISTRY",
    outputs: [
      {
        internalType: "contract INameRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_metadataDigest",
        type: "bytes32",
      },
    ],
    name: "updateMetadataDigest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e08060405234610279575f610a8a803803809161001d8286610291565b843982019160a08184031261027957610035816102b4565b92610042602083016102b4565b9361004f604084016102b4565b60608401519095906001600160401b03811161027957840183601f82011215610279578051946001600160401b03861161027d576040519561009b601f8201601f191660200188610291565b808752602087019560208285010111610279576020815f928260809601895e8801015201519160018060a01b031660805260018060a01b031660a0528460c05261011360096020604051809582820197518091895e8101682d747265617375727960b81b838201520301601619810185520183610291565b6080516001600160a01b0316803b15610279575f9283606460405180978196829563bfde380d60e01b8452604060048501525180928160448601528585015e82820184018590526024830152601f01601f191681010301925af1801561026e5761025b575b50608051909182916001600160a01b0316803b15610257576040516375dcebc760e01b81526001600160a01b0390921660048301526001600160601b0360248301529091908290604490829084905af1801561024c57610234575b6040516107c190816102c9823960805181818160bc0152818161022b01528181610292015281816105a9015261067a015260a0518181816102d70152610366015260c051818181610173015281816103360152818161057f015261069f0152f35b61023f828092610291565b61024957806101d3565b80fd5b6040513d84823e3d90fd5b5050fd5b61026791505f90610291565b5f5f610178565b6040513d5f823e3d90fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b0382119082101761027d57604052565b51906001600160a01b03821682036102795756fe6080806040526004361015610012575f80fd5b5f905f3560e01c90816301ffc9a7146103ef575080633857d9d71461032257806344df8e7014610306578063a05c2616146102c1578063a4c52b861461027c578063bc197c81146101a2578063e532b61d1461015d5763f23a6e6114610076575f80fd5b3461015a5760a036600319011261015a5761008f610442565b50610098610458565b5060843567ffffffffffffffff8111610158576100b990369060040161050d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610149576040516100f860408261046e565b600181526020808201903682378151156101355761011b92506044359052610670565b610123610563565b60405163f23a6e6160e01b8152602090f35b634e487b7160e01b83526032600452602483fd5b63058a7c7360e31b8152600490fd5b505b80fd5b503461015a578060031936011261015a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461015a5760a036600319011261015a576101bc610442565b506101c5610458565b5060443567ffffffffffffffff8111610158576101e69036906004016104a4565b9060643567ffffffffffffffff8111610158576102079036906004016104a4565b5060843567ffffffffffffffff81116101585761022890369060040161050d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036101495761026282610670565b61026a610563565b60405163bc197c8160e01b8152602090f35b503461015a578060031936011261015a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461015a578060031936011261015a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461015a578060031936011261015a5761031f610563565b80f35b50346103dc5760203660031901126103dc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036103e0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156103dc575f8091602460405180948193633857d9d760e01b835260043560048401525af180156103d1576103c3575080f35b6103cf91505f9061046e565b005b6040513d5f823e3d90fd5b5f80fd5b636346b2b760e01b5f5260045ffd5b346103dc5760203660031901126103dc576004359063ffffffff60e01b82168092036103dc57602091630271189760e51b8114908115610431575b5015158152f35b6301ffc9a760e01b1490508361042a565b600435906001600160a01b03821682036103dc57565b602435906001600160a01b03821682036103dc57565b90601f8019910116810190811067ffffffffffffffff82111761049057604052565b634e487b7160e01b5f52604160045260245ffd5b9080601f830112156103dc5781359167ffffffffffffffff8311610490578260051b9060208201936104d9604051958661046e565b84526020808501928201019283116103dc57602001905b8282106104fd5750505090565b81358152602091820191016104f0565b81601f820112156103dc5780359067ffffffffffffffff82116104905760405192610542601f8401601f19166020018561046e565b828452602083830101116103dc57815f926020809301838601378301015290565b604051627eeac760e11b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483018190527f000000000000000000000000000000000000000000000000000000000000000090911691602081604481865afa9081156103d1575f9161063e575b50806105ee57505050565b823b156103dc5760845f928360405195869485936380a5a37160e01b855260048501526024840152606060448401528160648401525af180156103d1576106325750565b5f61063c9161046e565b565b90506020813d602011610668575b816106596020938361046e565b810103126103dc57515f6105e3565b3d915061064c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691907f0000000000000000000000000000000000000000000000000000000000000000165f5b8251811015610785578251811015610771576020600582901b84018101516040516306713e2360e41b8152600481018590526001600160a01b03909116602482015290816044815f895af19081156103d1575f91610737575b5015610728576001016106c1565b631c74bb5760e11b5f5260045ffd5b90506020813d8211610769575b816107516020938361046e565b810103126103dc575180151581036103dc575f61071a565b3d9150610744565b634e487b7160e01b5f52603260045260245ffd5b5050505056fea26469706673582212200108daefbe6af0f7d71f139c2e5eb8415ac16e2bca330e23b3034593731c5b5f64736f6c634300081c0033";

type BaseTreasuryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseTreasuryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseTreasury__factory extends ContractFactory {
  constructor(...args: BaseTreasuryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _hub: AddressLike,
    _nameRegistry: AddressLike,
    _group: AddressLike,
    _groupName: string,
    _metadataDigest: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _hub,
      _nameRegistry,
      _group,
      _groupName,
      _metadataDigest,
      overrides || {}
    );
  }
  override deploy(
    _hub: AddressLike,
    _nameRegistry: AddressLike,
    _group: AddressLike,
    _groupName: string,
    _metadataDigest: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _hub,
      _nameRegistry,
      _group,
      _groupName,
      _metadataDigest,
      overrides || {}
    ) as Promise<
      BaseTreasury & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BaseTreasury__factory {
    return super.connect(runner) as BaseTreasury__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseTreasuryInterface {
    return new Interface(_abi) as BaseTreasuryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BaseTreasury {
    return new Contract(address, _abi, runner) as unknown as BaseTreasury;
  }
}
