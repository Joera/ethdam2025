/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Circle, CircleInterface } from "../../../sol/base/Circle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b5060ae80601a5f395ff3fe6080604052348015600e575f5ffd5b50600436106030575f3560e01c806340c10f191460345780639dc29fac146034575b5f5ffd5b6043603f3660046045565b5050565b005b5f5f604083850312156055575f5ffd5b82356001600160a01b0381168114606a575f5ffd5b94602093909301359350505056fea26469706673582212204e55198713e0d45c93f1d7f7632dcb2b4a58f502ddcd772d0f0f56c3925ec9a664736f6c634300081c0033";

type CircleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CircleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Circle__factory extends ContractFactory {
  constructor(...args: CircleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Circle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Circle__factory {
    return super.connect(runner) as Circle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CircleInterface {
    return new Interface(_abi) as CircleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Circle {
    return new Contract(address, _abi, runner) as unknown as Circle;
  }
}
