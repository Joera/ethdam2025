/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  INameRegistryExtended,
  INameRegistryExtendedInterface,
} from "../../../../sol/circles/INameRegistry.sol/INameRegistryExtended";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_avatar",
        type: "address",
      },
    ],
    name: "getMetadataDigest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "isValidName",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "isValidSymbol",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "avatar",
        type: "address",
      },
    ],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "avatar",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "registerCustomName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "avatar",
        type: "address",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "registerCustomSymbol",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registerShortName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "registerShortNameWithNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "avatar",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "metadataDigest",
        type: "bytes32",
      },
    ],
    name: "setMetadataDigest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "avatar",
        type: "address",
      },
    ],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "metadataDigest",
        type: "bytes32",
      },
    ],
    name: "updateMetadataDigest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class INameRegistryExtended__factory {
  static readonly abi = _abi;
  static createInterface(): INameRegistryExtendedInterface {
    return new Interface(_abi) as INameRegistryExtendedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): INameRegistryExtended {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as INameRegistryExtended;
  }
}
