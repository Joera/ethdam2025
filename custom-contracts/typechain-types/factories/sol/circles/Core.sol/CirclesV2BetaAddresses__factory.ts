/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  CirclesV2BetaAddresses,
  CirclesV2BetaAddressesInterface,
} from "../../../../sol/circles/Core.sol/CirclesV2BetaAddresses";

const _abi = [
  {
    inputs: [],
    name: "getCirclesCore",
    outputs: [
      {
        components: [
          {
            internalType: "contract IHub",
            name: "hub",
            type: "address",
          },
          {
            internalType: "contract IStandardTreasury",
            name: "standardTreasury",
            type: "address",
          },
          {
            internalType: "contract INameRegistryExtended",
            name: "nameRegistry",
            type: "address",
          },
          {
            internalType: "contract IERC20Lift",
            name: "erc20Lift",
            type: "address",
          },
        ],
        internalType: "struct CirclesCoreAddresses.CirclesCore",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346098575f80546001600160a01b031990811673c12c1e50abb450d6205ea2c3fa861b3b834d13e8179091556001805482167308f90ab73a515308f03a718257ff9887ed330c6e17905560028054821673a27566fd89162cc3d40cb59c87aaaa49b85f347417905560038054909116735f99a795dd2743c36d63511f0d4bc667e6d3cdb517905561012d908161009d8239f35b5f80fdfe608060405260043610156010575f80fd5b5f3560e01c637f756b46146022575f80fd5b3460c0575f36600319011260c0575f6060603960c4565b828152602081018390526040810183905201525f546001546002546003546080936001600160a01b039081169391811692811691166060607660c4565b85815260208101928352604081019384520192835260405193845260018060a01b03905116602084015260018060a01b03905116604083015260018060a01b039051166060820152f35b5f80fd5b604051906080820182811067ffffffffffffffff82111760e357604052565b634e487b7160e01b5f52604160045260245ffdfea26469706673582212206976d786f8a3186dbf5b5e8b7105f8be33da6cb1bbbf47c0df4ea5400c29e62e64736f6c634300081c0033";

type CirclesV2BetaAddressesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CirclesV2BetaAddressesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CirclesV2BetaAddresses__factory extends ContractFactory {
  constructor(...args: CirclesV2BetaAddressesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CirclesV2BetaAddresses & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): CirclesV2BetaAddresses__factory {
    return super.connect(runner) as CirclesV2BetaAddresses__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CirclesV2BetaAddressesInterface {
    return new Interface(_abi) as CirclesV2BetaAddressesInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CirclesV2BetaAddresses {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as CirclesV2BetaAddresses;
  }
}
