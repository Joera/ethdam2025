/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CustomMintPolicy,
  CustomMintPolicyInterface,
} from "../../../sol/implementations/CustomMintPolicy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeBurnPolicy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeMintPolicy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b506102818061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063862038be14610038578063b703825914610065575b5f5ffd5b6100516100463660046100e1565b600195945050505050565b604051901515815260200160405180910390f35b61005161007336600461018c565b600198975050505050505050565b80356001600160a01b0381168114610097575f5ffd5b919050565b5f5f83601f8401126100ac575f5ffd5b50813567ffffffffffffffff8111156100c3575f5ffd5b6020830191508360208285010111156100da575f5ffd5b9250929050565b5f5f5f5f5f608086880312156100f5575f5ffd5b6100fe86610081565b945061010c60208701610081565b935060408601359250606086013567ffffffffffffffff81111561012e575f5ffd5b61013a8882890161009c565b969995985093965092949392505050565b5f5f83601f84011261015b575f5ffd5b50813567ffffffffffffffff811115610172575f5ffd5b6020830191508360208260051b85010111156100da575f5ffd5b5f5f5f5f5f5f5f5f60a0898b0312156101a3575f5ffd5b6101ac89610081565b97506101ba60208a01610081565b9650604089013567ffffffffffffffff8111156101d5575f5ffd5b6101e18b828c0161014b565b909750955050606089013567ffffffffffffffff811115610200575f5ffd5b61020c8b828c0161014b565b909550935050608089013567ffffffffffffffff81111561022b575f5ffd5b6102378b828c0161009c565b999c989b509699509497939692959450505056fea2646970667358221220d6b42790b6790aaa9b4220d84fe5dc5e915344a3b49bc977c446825f78fd472e64736f6c634300081c0033";

type CustomMintPolicyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomMintPolicyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CustomMintPolicy__factory extends ContractFactory {
  constructor(...args: CustomMintPolicyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CustomMintPolicy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CustomMintPolicy__factory {
    return super.connect(runner) as CustomMintPolicy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomMintPolicyInterface {
    return new Interface(_abi) as CustomMintPolicyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CustomMintPolicy {
    return new Contract(address, _abi, runner) as unknown as CustomMintPolicy;
  }
}
